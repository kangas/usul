/*
 * This is a GraphViz diagram
 */

digraph states {
	label="\n\nItem Retrieval States"
	fontsize=20;

	node [shape=Mdiamond]; start;
	node [shape=Msquare]; end; error;

	node [shape=box]; cacheReady; indexLoaded;
	node [shape=diamond]; isCacheReady;
	// node [shape=parallelogram];
	node [shape=trapezium]; "foreach:indexYear"; "foreach:quarter";
	node [shape=invhouse]; "awaitRequests"
	node [shape=ellipse]; cacheReady; initCache;

	/*
	 * Is the local object cache ready for use?
	 */
	start -> isCacheReady;
	isCacheReady -> cacheReady [label="Yes",weight=2];
	isCacheReady -> initCache [label="No"];
	initCache -> cacheReady [label="Ok"];
	initCache -> error [label="Error",style=dashed,weight=0];

	subgraph cluster_recache {
		label = "function:recache";
		color=purple;
		style="dashed";
		rank=min;

		recache [shape=box];
		isCached [shape=diamond];

		recache -> isCached;
		isCached -> return [label=Yes];
		isCached -> queueFetch [label=No];
		queueFetch -> fetch;
		fetch -> return [label=Ok];
		fetch -> fail [label=Error];
	}

	/*
	 * Retrieve EDGAR primary index files
	 */
	"recache:full-index/";
	"foreach:indexYear" [shape=tripleoctagon];
	"foreach:quarter" [shape=tripleoctagon];
	"recache:full-index/YEAR" [shape=ellipse];

	cacheReady -> "recache:full-index/"
	"recache:full-index/" -> recache [weight=0.5,dir=both];
	"recache:full-index/" -> "foreach:indexYear" [label=Ok,weight=10];
	"recache:full-index/" -> retryOnce [label="Error",style=dashed,weight=0.5];
	"foreach:indexYear" -> "recache:full-index/YEAR"

	"recache:full-index/YEAR" -> recache [weight=0.5,dir=both];
	"recache:full-index/YEAR" -> "foreach:quarter" [label=Ok,weight=10];
	"recache:full-index/YEAR" -> retryOnce [label="Error",style=dashed,weight=0.5];
	"foreach:quarter" -> "recache:full-index/YEAR/QUARTER";

	"recache:full-index/YEAR/QUARTER";
	"recache:full-index/YEAR/QUARTER" -> recache [weight=0.5,dir=both];
	"recache:full-index/YEAR/QUARTER" -> awaitRequests [weight=10];
	"recache:full-index/YEAR/QUARTER" -> retryOnce [label="Error",style=dashed,weight=0.5];
	awaitRequests -> indexLoaded [label=Ok];
	awaitRequests -> error [label="Timeout",style=dashed,weight=0];

	retryOnce -> error [label="Error",style=dashed,weight=0];

	indexLoaded -> end;
}